#ifndef _UART_H
#define _UART_H

#include "stm32l0xx.h"
#include <stdint.h>
#include <stdbool.h>
#include <circular_buffer.h>

// to change which uart you wish to target,
// change this define.
#define UARTNUM 1

extern CircularBuffer uartTxBuff, uartRxBuff;


// note: Uart1Init can also re-init the UART
// for configuration changes. Just call it with the
// new settings.
int Uart##UARTNUM##Init(int baud, bool useParity, bool oddParity);
void Uart1WaitForTxFifoSpace( int space_needed ); // waits until the TX fifo is empty, use this instead of looping on Uart1TxFree()
int Uart1TxFree(); // Gets the number of empty bytes in the TX fifo, use this to check for space before calling Uart1Tx
int Uart1Tx(uint8_t* data, int len); // Pushes data into the TX fifo, non-blocking, returns how many bytes were successfully pushed.
int Uart1TxString(char* data); // Writes a string to the TX fifo, this function blocks when TX FIFO is full and waits for space to become available, instead of aborting, like the standard TX does.
int Uart1WaitForData(int numBytes, int timeoutMs); // Returns 0 when data is available, or 1 on timeout.  Use this function to wait for data to arrive instead of polling Uart1RxLen
int Uart1RxLen(); // Gets the number of bytes waiting in the RX fifo, use this to check for data before calling Uart1Rx.
int Uart1Rx(uint8_t *data, int len); // Reads at most len bytes from the RX fifo, returns the number of bytes successfully read.
void Uart1DiscardTxBuffer(); // clears the TX FIFO
void Uart1DiscardRxBuffer(); // clears the RX FIFO
bool Uart1HasRxErrorInFifo(); // returns true if one of the bytes in the fifo has an error.

// bitmask flags for errors
#define UART_OVERRUN_ERROR (1 << 0)
#define UART_PARITY_ERROR (1 << 1)
#define UART_FRAMING_ERROR (1 << 2)
#define UART_NOISE_DETECTED (1 << 3) // if a break is received, a null byte will be added to the fifo with this flag.
uint8_t Uart1GetRxErrorFlags(); // gets the errors for the last byte not yet read from the fifo.

#endif
