/*
 * rotary_encoder.c
 *
 *  Created on: 1Dec.,2017
 *      Author: mark
 */

#include <stm32l0xx.h>
#include <stdint.h>
#include "main.h"
#include "gpio.h"
#include "systick.h"

int encoder_value = 0;
uint64_t button_pressed_time = 0;
uint64_t rotor_time = 0;
int button_pressed = 0;
uint8_t flags;
#define FLAG_LEFT 1
#define FLAG_RIGHT 2

void RotaryEncoderInit(void)
{
	// Setup pins for Rotary Encoder
	GPIO_AS_INPUT(A,6);
	GPIO_AS_INPUT(A,7);
	GPIO_AS_INPUT(A,8);
	GPIO_ENABLE_PULLUP(A,6);
	GPIO_ENABLE_PULLUP(A,7);
	GPIO_ENABLE_PULLUP(A,8);
	// and interrupts
	EXTI->IMR = EXTI_IMR_IM6 | EXTI_IMR_IM7 | EXTI_IMR_IM8;
	// on falling edge
	EXTI->FTSR = EXTI_FTSR_FT6 | EXTI_FTSR_FT7 | EXTI_FTSR_FT8;
	// ensure we select port A
	SYSCFG->EXTICR[2] = SYSCFG_EXTICR2_EXTI6_PA | SYSCFG_EXTICR2_EXTI7_PA;
	SYSCFG->EXTICR[3] = SYSCFG_EXTICR2_EXTI7_PA;
	// enable in the NVIC
	NVIC_SetPriority(EXTI4_15_IRQn,1);
	NVIC_EnableIRQ(EXTI4_15_IRQn);
}

int RotaryEncoderGetValue(void)
{
	int temp;
	NVIC_DisableIRQ(EXTI4_15_IRQn);
	temp = encoder_value;
	encoder_value = 0;
	NVIC_EnableIRQ(EXTI4_15_IRQn);
	return temp;
}

int RotaryEncoderGetPressed(void)
{
	int temp;
	NVIC_DisableIRQ(EXTI4_15_IRQn);
	temp = button_pressed;
	button_pressed = 0;
	NVIC_EnableIRQ(EXTI4_15_IRQn);
	return temp;
}

void EXTI4_15_IRQHandler(void)
{
	uint32_t temp = EXTI->PR;
	EXTI->PR |= EXTI_PR_PIF6 | EXTI_PR_PIF7 | EXTI_PR_PIF8;

	if (temp & EXTI_PR_PIF6)
	{
		uint64_t temp = GetSystickMs();
		if (temp - button_pressed_time > 100) // 100ms debounce
		{
			button_pressed = 1;
		}
		button_pressed_time = temp;
	}
	else
	{

		if (GetSystickMs() - rotor_time > 50) // Xms debounce on rotate.
		{
			if (!flags)
			{
				if (temp & EXTI_PR_PIF7)
					flags |= FLAG_LEFT;
				if (temp & EXTI_PR_PIF8)
					flags |= FLAG_RIGHT;
			}
			else
			{
				if ((temp & EXTI_PR_PIF7) && (flags & FLAG_RIGHT))
				{
					encoder_value++;
					flags = 0;
					rotor_time = GetSystickMs();
				}

				if ((temp & EXTI_PR_PIF8) && (flags & FLAG_LEFT))
				{
					encoder_value--;
					flags = 0;
					rotor_time = GetSystickMs();
				}

			}

		}
	}
}

