/*
 * oled96.c
 *
 *  Created on: 01/02/2015
 *      Author: Mark
 */

//----------------------------------------------------------------------
//EASTRISING TECHNOLOGY CO,.LTD.//
// Module    : ER-OLED0.96-1  0.96"
// Lanuage   : C51 Code
// Create    : JAVEN
// Date      : 2010-06-18
// Drive IC  : SSD1306
// INTERFACE : I2C
// MCU 		 : AT89LV52
// VDD		 : 3.3V   VBAT: 3.6V
// SA0 connected to VSS. Slave address:White:0x70 Read 0x71
//----------------------------------------------------------------------

#include "main.h"
#include "i2c_master.h"
#include <stdint.h>


/*
#define Start i2c_start
#define Stop i2c_stop
#define SentByte i2c_write8
*/

#include "oled96.h"

uchar Contrast_level = 0x8F;

//void SentByte(unsigned char Byte);
//void Check_Ack(void); //Acknowledge
//void Stop(void);
//void Start(void);
//void Send_ACK(void);
//unsigned char ReceiveByte(void);

#include "fonts.h"

const uint8_t null[2] = {0x40, 0x00};
uint8_t print_character(uint8_t first_column, uint8_t top_page, uint8_t character)
{
	// this function is hard coded to use font8x16_doslike as the font map.

	set_page(top_page);
	set_column(first_column);
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions
	TI_USCI_I2C_transmit(9, font8x16_doslike[(character-32)*2]);
	set_column(first_column + 8); // mp035 for some reason, only some of the time, the cursor does not move to the correct position before printing the blank byte, so this was added
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions
	TI_USCI_I2C_transmit(2, &null);

	set_page(top_page+1);
	set_column(first_column);
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions
	TI_USCI_I2C_transmit(9, font8x16_doslike[(character-32)*2+1]);
	set_column(first_column + 8); // mp035 for some reason, only some of the time, the cursor does not move to the correct position before printing the blank byte, so this was added
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions
	TI_USCI_I2C_transmit(2, &null);


	// increment the column to make consecutive numbers easier
	return first_column+9;
}

uint8_t print_digit(uint8_t first_column, uint8_t top_page, uint8_t digit_value)
{
	return print_character(first_column, top_page, digit_value + 48);
}

uint8_t print_string(uint8_t first_column, uint8_t top_page, uint8_t *string)
{
	while (*string)
	{
		first_column = print_character(first_column, top_page, *string++);
	}
	return first_column;
}

/*
void display_Contrast_level(uchar number)
{
	uchar number1, number2, number3;
	number1 = number / 100;
	number2 = number % 100 / 10;
	number3 = number % 100 % 10;
	set_column(Start_column + 0 * 8);
	set_page(Start_page);
	Write_number(num, number1, 0);
	set_column(Start_column + 1 * 8);
	set_page(Start_page);
	Write_number(num, number2, 1);
	set_column(Start_column + 2 * 8);
	set_page(Start_page);
	Write_number(num, number3, 2);

}
*/
void adj_Contrast(int8_t adjustment_amt) // plus or minus amt.
{
	Contrast_level += adjustment_amt;
	Set_Contrast_Control_Register(Contrast_level);
	//display_Contrast_level(Contrast_level);
}

/*
void Start(void)
{
	SDA = 1;
	SCL = 1;
	_nop_();
	SDA = 0;
	_nop_();
	SCL = 0;
}

void Stop(void)
{
	SCL = 0;
	SDA = 0;
	_nop_();
	SCL = 1;
	_nop_();
	SDA = 1;
}

void Check_Ack(void) //Acknowledge
{
	unsigned char ack = 1;
	SDA = 1;
	SCL = 1;
	_nop_();
	while (ack == 1)
	{
		ack = SDA;
	}
	_nop_();
	SCL = 0;
	return;
}

void SentByte(unsigned char Byte)
{
	uchar i;
	for (i = 0; i < 8; i++)
	{
		SCL = 0;
		if ((Byte & 0x80) == 0x80)
			SDA = 1;
		else
			SDA = 0;
		SCL = 1;
		_nop_();
		Byte = Byte << 1;
	}
	SCL = 0;
	Check_Ack();

}

unsigned char ReceiveByte(void)
{
	uchar i, rudata = 0;
	SCL = 0;
	SDA = 1;
	for (i = 0; i < 8; i++)
	{
		SCL = 1;
		_nop_();
		if (SDA == 1)
			rudata |= 0x01;
		else
			rudata |= 0x00;
		rudata = rudata << 1;
		SCL = 0;
		_nop_();
	}
	Send_ACK();
	return rudata;
}

void Send_ACK(void)
{
	SCL = 0;
	SDA = 0;
	_nop_();
	SCL = 1;
	SCL = 0;
}

*/

uint8_t scdata[4];
void send_command(uint8_t command)
{
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions, noting that they use our buffer.
	scdata[0] = 0x80;
	scdata[1] = command;
	TI_USCI_I2C_transmit(2, scdata);
	return;
}

void send_2byte_command(uint8_t command, uint8_t arg)
{
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions, noting that they use our buffer.
	scdata[0] = 0x80;
	scdata[1] = command;
	scdata[2] = 0x80;
	scdata[3] = arg;
	TI_USCI_I2C_transmit(4, scdata);
}

// Set page address 0~15
void set_page(unsigned char add)
{
	send_command(0xb0 | add);
	return;
}

void set_column(unsigned char add)
{
	send_command((0x10 | (add >> 4)));
	send_command((0x0f & add));
	return;
}

void Set_Contrast_Control_Register(unsigned char mod)
{
	uint8_t data[4];
	data[0] = 0x80;
	data[1] = 0x81;
	data[2] = 0x80;
	data[3] = mod;
	while(TI_USCI_I2C_notready()); // wait for any pending transmissions
	TI_USCI_I2C_transmit(4,data);
	return;
}

void clear_page(int page)
{
	uint8_t i;
	uint8_t cleardata[] =  {0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	set_page(page);
	set_column(0);
	for (i=0; i<16; i++)
	{
		TI_USCI_I2C_transmit(9, cleardata);
	}
}

void cls()
{
	uint8_t j;
	for (j=0; j<8; j++)
	{
		clear_page(j);
	}
}

void oled96_init(void)
{
	/*
	RST = 1;
	Delay(2000);
	RST = 0;
	Delay(2000);
	RST = 1;
*/

//# if ((FCY / 400000) < 4)
//#error "Clock frequency is too slow for a 400kHz i2c bus."
//#endif

	// ensure module is powered down (we don't have acccess to the reset pin, so we use VCC to reset.
	//P1OUT &= ~BIT4;
	//P1DIR |= BIT4;

	//TI_USCI_I2C_transmitinit(SLAVE_ADDRESS, FCY / 400000);

	//HAL_Delay(1000);
	//P1OUT |= BIT4; // power up module.



	//Start();
	send_command(0xAE); //--turn off oled panel

	send_2byte_command(0xD9,0x22); // set pre-charge period to it's reset value.
	send_2byte_command(0xDB,0x20); // set vcomh deselect to it's reset value.

	send_2byte_command(0xd5,0x80); //--set display clock divide ratio/oscillator frequency
	send_2byte_command(0xa8, 0x3f); //--set multiplex ratio(to 64)
	send_2byte_command(0x8d,0x14); //--set Charge Pump enable (0x8d, 0x10 is disable)
	send_2byte_command(0xd3, 0x00); //-set display offset (0x00 = not offset) -- mp035 checked this is the POR value.
	send_command(0xB0); //--set start page address to 0 -- mp035 added.
	send_command(0x40); //--set start line address to 0 -- mp035 good.
	send_command(0xA6); // set normal display (0xA7 is inverse display) -- mp035 good.
	send_command(0xA4); //--disable entire display on, A5 turns all pixels on. -- mp035 good
	send_command(0xA1); //--set segment re-map 128 to 0 -- mp035 checked, I think this reverses horizontal addressing for this display.
	send_command(0xC8); //--Set COM Output Scan Direction 64 to 0 -- mp035 checked, but unsure exactly what this does.
	send_2byte_command(0xda, 0x12); //--set com pins hardware configuration -- mp035 - this seems like it would be INCORRECT
	send_2byte_command(0x81, Contrast_level); //--set contrast control register -- mp035 good.
	send_command(0xd9); //--set pre-charge period
	send_command(0xf1);
	send_command(0xdb); //--set vcomh
	send_command(0x40);

	send_2byte_command(0x20, 0x02); // set addressing mode to page addressing.
	send_command(0x00); // set lower nibble of the column start address to 0
	send_command(0x10); // set the upper nibble of the column start address to 0
	send_command(0x2E); // disable any scrolling command which may be in progress.

	send_command(0xAF); //--turn on oled panel
	HAL_Delay(100); // mp035 required, 100ms as per datasheet.

	//mp035 now clear the panel
	cls();

}



void print_image(const unsigned char pic[])
{
	unsigned char i;
	for (i = 0; i < 0x08; i++)
	{
		set_page(i);
		set_column(0x00);
		while(TI_USCI_I2C_notready()); // wait for any pending transmissions
		TI_USCI_I2C_transmit(0x81, pic+(i * 0x81));
	}
	return;
}

void oled96_loop(void)
{
	oled96_init();

	while (1)
	{
		uint8_t value;
		uint8_t column = 0;

		for (value = 0; value<10; value++)
		{
			column = print_digit(column,0,value);
			HAL_Delay(500);
		}
		column = print_string (column,0, "Bender");
        HAL_Delay(500);
		column = print_character (column,0, '.');
        HAL_Delay(500);
		column = print_character (column,0, '.');
        HAL_Delay(500);
		column = print_character (column,0, '.');
        HAL_Delay(500);
		column = print_character (column,0, '.');
        HAL_Delay(500);
		column = print_character (column,0, '.');
        HAL_Delay(500);
		column = print_character (column,0, '.');
        HAL_Delay(500);
        column = 0;
		column = print_string (column,2, "IS GREAT!");

        HAL_Delay(2000);

        column = 0;
        column = print_string (column,4, "Bender");
        HAL_Delay(500);
        column = print_character (column,4, '.');
        HAL_Delay(500);
        column = print_character (column,4, '.');
        HAL_Delay(500);
        column = print_character (column,4, '.');
        HAL_Delay(500);
        column = print_character (column,4, '.');
        HAL_Delay(500);
        column = print_character (column,4, '.');
        HAL_Delay(500);
        column = print_character (column,4, '.');
        HAL_Delay(500);
        column = 0;
        column = print_string (column,6, "IS GREAT!");

        /*
		while(1)
		{
			LPM0;
		}
         */

		while(1)
		{
			// halt here.
		}
		/*
		Display_Picture(pic);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic1);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic2);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic3);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic4);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Chess(0x0f);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Chinese(font);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Display_Chinese(font);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		Display_Chinese_Column(font);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7); //--set Inverse Display
		SentByte(0x00);
		Stop();
		Display_Chinese_Column(font);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6); //--set normal display
		SentByte(0x00);
		Stop();
		*/
	}
}

